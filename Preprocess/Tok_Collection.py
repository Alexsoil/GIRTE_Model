from Preprocess.Tok_Document import TokDocument
from Preprocess.Collection import Collection
from os.path import join, isdir
from os import listdir
from tqdm import tqdm

class TokCollection(Collection):
    """
        Based on the existing Collection class, this subclass adds functionality
        needed for organizing data into Collections based not on the plain terms
        of the documents, but the tokens generated by the BertTokenizer. 
        Necessary for implementing the token based GSB Model.

        A TokCollection object consists of:
    """

    def __init__(self, path, docs=None, name=''):
        super().__init__(path, docs, name)

    def create_collection(self):
        self.num_docs = 0
        if not self.docs:
            filenames = [join(self.path, id) for id in listdir(self.path)]
            max_id = max([int(id) for id in listdir(self.path)])
            self.num_docs = int(max_id)
            for fn in tqdm(filenames):
                if not isdir(fn):
                    self.docs.append(TokDocument(fn))
            self.inverted_index = self.create_inverted_index()
    
    def create_inverted_index(self):
        inv_index = {}
        token_id = 0
        error_counter = 0
        try:
            for doc in self.docs:
                print(f'Processing doc {doc.doc_id}')
                for token, occurances in doc.token_frequency.items():
                    if token not in inv_index:
                        inv_index[token] = {
                            'id': token_id,
                            'total_occurances': occurances,
                            'posting_list': [[doc.doc_id, occurances]],
                            'token': token
                        }
                        token_id += 1
                    elif token in inv_index:
                        inv_index[token]['total_occurances'] += occurances
                        inv_index[token]['posting_list'] += [[doc.doc_id, occurances]]
        except KeyError as Err:
            print(Err)
            error_counter += 1
            print(f'Keys not found {error_counter}')
        return inv_index